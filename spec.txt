RDM: Three-instruction RISC ISA with 16-bit instructions

There are 124 64-bit registers. Each register can either be a physical register, or a *pseudo-register*. Pseudo-registers are like device files: They are actually proxies to external components like RAM.

00h-0Fh: General-purpose registers d0-d15.
10h-1Fh: GPR shadows d0s-d15s.
20h-27h: Accumulators a0-a7.
28h-2Fh: Accumulator shadows a0s-a7s.
30h-37h: Bit-fields b0-b7.
38h-3Fh: Bit-field shadows b0s-b7s.
40h-4Fh: Pointers p0-p15. (They do not need to be 64-bit aligned.)
50h-5Fh: Memory pseudo-registers m0-m15, with mX referencing 64 bits in memory beginning at byte pX.
60h-63h: Utility registers u0-u3. (u1-u3 are not currently used and can be used as normal GPRs.)
64h-67h: Utility shadows u0s-u3s.
68h:     d15s write counter dc.
69h:     Program counter pc.
6Ah:     Write bit-mask bm.
6Bh:     Write mask shadow bms.
6Ch:     Loop pointer register lp.
6Dh:     Loop control register lc.
6Eh:     Function control register fc.
6Fh:     Pin pseudo-register ep.

When a non-shadow register is updated, its corresponding shadow is also overwritten with the new value, but updating the shadow will not change the original register. Whenever a write happens to d15s, dc is incremented (unmasked), and whenever a write happens to d15, dc is reset to zero.

Whenever a nonzero value is written to lc, pc is set to lp (unmasked).
Instead of writing value V to fc, unmasked copy pc (which points to the next instruction) to fc, then copy V to pc (whether this is masked depends on the instruction).

Reading from ep reads the values of input pins, writing writes to output pins.

Notation: a lowercase n references an arbitrary register type, and X references an arbitrary register index. "/s" after a register or register range means "it or its shadow". Therefore, "aX/s" means "any accumulator or accumulator shadow register" and nX means "any non-shadow register" (this also includes special registers like dc, pc and bm).

Each instruction is two bytes:

XSSSSSSS YDDDDDDD

Where bit X select the instruction, bit Y selects the instruction mode, S selects the source register, and D selects the destination register.

Each instruction reads the contents of the source register and combines it with the destination by a specified set of rules.
Writes to registers that are not bm/s are masked with bms. If an instruction does not write to bms, bms is reset to bm after the execution of that instruction.

BEFORE an instruction executes, 2 is added to pc (not masked).

X = 0: OPR Operate

If Y = 1 and S = D, zeroes D. Otherwise, combines the source value with the destination value based on the destination register type:

D = dX/s, pX, mX, uX/s, dc, pc, bm/s, lp, lc, fc: Copy value. Y is reserved and should be zero.
D = aX/s: Add value to accumulator. If Y = 1, overwrite accumulator with value instead.
D = bX/s: XOR value to bit-field. If Y = 1, overwrite bit-field with value instead.


X = 1, S = D: LDV Load value

Copies the 32-bit immediate (sign extended) that comes immediately after the instruction to D, overwriting it. If and only if Y = 0, the write is masked with bms. pc is increased by 6 instead of 2 after this instruction to skip over the immediate.


X = 1, S != D: CAL Calculate

Combines the source value with the destination value(s) based on the destination register type:

D = dX/s, pX, mX, uX/s (X>0), dc, lp, fc: Reserved, do not use.
D = aX/s: Combine value to accumulator based on bits 0-2 of u0s. If Y = 1, copies the result into S as well as D, except for u0s = 011, where the remainder is put into S instead while the quotient is put in D.
000: Add to D.
001: Subtract from D.
010: Unsigned multiply with D.
011: Unsigned divide by D.

D = bX/s: Combine value to bit-field based on bits 3-5 of u0s. If Y = 1, copies the result into S as well as D.
000: XOR with D.
001: AND with D.
010: OR with D.
011: NOT S. (Computation ignores original value of D.)
100: TEST S. (If S has any bit set, set D to all ones, else all zeroes.)
101: COUNT S. (Sets D to the number of one bits in S.)
110: LSH D by S.
111: RSH D by S.

D = u0/s: Copy the first instruction byte into D with mask 7, ignoring bms. If Y = 1, left shift the first instruction byte by 3 and write into D with mask 56 instead.
D = pc: Unmasked add the lower 7 bits of the first instruction byte(sign-extended) to pc.
D = bm/s: Let the lower 7 bits of the first instruction byte be L, set the i-th lowest bit of D to (L-64 <= i && i < L).
D = lc: add S to lc if Y = 0, else subtract S from lc.
